apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

List<String> sngLanguages = ['ba', 'be', 'bg', 'ce', 'cv', 'et',
                             'kk', 'kv', 'lt', 'lv', 'mk', 'os',
                             'pl', 'sah', 'sk', 'sl', 'tt', 'uk']

static String listToJavaArray(List<String> list) {
    String result = ""
    list.each { item -> result += (result.empty ? "" : ",") + "\"${item}\"" }
    return "{${result}}"
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.orcchg.ecologymap"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.1'
    implementation 'com.facebook.fresco:fresco:1.9.0'
    implementation 'com.google.android.gms:play-services-maps:15.0.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

/**
 * Performs before every build
 */
android.applicationVariants.all {
    // ------------------------------------------
    /**
     * Copies values-ru/strings.xml to the rest of sng-language resource folders
     */
    variant -> variant.mergeResources.doFirst {
        File tmpResDir = file(buildDir.absolutePath + '/tmp/res')
        if (!tmpResDir.exists()) { tmpResDir.mkdirs() }
        sngLanguages.each { language ->
            File languageDir = file(tmpResDir.absolutePath + "/values-${language}")
            if (!languageDir.exists()) { languageDir.mkdirs() }
            copy {
                from rootDir.absolutePath + '/app/src/main/res-main/values-ru/'
                into languageDir.absolutePath
            }
        }
        android.sourceSets['main'].res.srcDirs += tmpResDir.absolutePath
    }

    // ------------------------------------------
    /**
     * Makes apk-filename for release builds
     */
    def flavor = variant.mergedFlavor
    if (variant.buildType.name == "release") {
        variant.outputs.all { output ->
            def flavorName = variant.name.replace("Release", "")
            def name = flavorName + "-" + flavor.versionName + "-b" + flavor.versionCode
            name = name + ".apk"
            outputFileName = name
        }
    } else if (variant.buildType.name == "debug") {
        flavor.versionName += "-" + variant.name + "-b" + flavor.versionCode
    }
}
